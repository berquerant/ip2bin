# TypeProf 0.21.8

# Classes
module Ip2bin
  VERSION: String

  class InvalidByteError
  end

  class Byte
    attr_reader int: Integer
    def initialize: (Integer int) -> void
    def &: (Byte other) -> Byte
    def to_bin: -> Bin
    def to_s: -> String
  end

  class Bin
    attr_reader int: Integer
    def initialize: (Integer int) -> void
    def to_s: -> String
    def to_byte: -> Byte
    def abbrev: -> String
    def self.from_str: (String str) -> Bin
  end

  class Compress
    def self.abbrev: (String str) -> String
    def self.deabbrev: (String str, Integer len) -> String
  end

  class Error < StandardError
  end

  class InvalidAddressError < Error
  end

  class Address
    attr_reader bytes: Array[Byte]
    def initialize: (*Byte bytes) -> void
    def &: ((Integer | Address) other) -> Address
    def to: (?:str `type`) -> (String | Integer)
    def self.from: (String str, ?:str `type`) -> Address
    def self.from_str: (String str) -> Address
    def abbrev: -> String
    def self.deabbrev: (String str) -> Address
    def to_bin: -> String
    def to_s: -> String
    def to_i: -> Integer
    def self.from_int: (Integer int) -> Address
  end

  class Yield
    def self.lines: (?IO src, ?IO err) { (String) -> untyped } -> void
  end

  class InvalidCidrError < Error
  end

  class Cidr
    attr_reader address: Address
    attr_reader mask: Mask
    def initialize: (Address address, Mask mask) -> void
    def to_s: -> String
    def self.from_str: (String str) -> Cidr
    def contain: ((Address | Cidr) address_or_cidr) -> bool
    def host: -> Address
    def network: -> Address
    def expand: -> Range[CidrRange]
  end

  class CidrGenerator
    include Comparable

    attr_reader value: Cidr
    def initialize: (Cidr value) -> void
    def self.children: (Cidr cidr, Integer bit) -> Range[CidrGenerator]
    def <=>: (CidrGenerator other) -> Integer
    def succ: -> CidrGenerator
  end

  class CidrRange
    include Comparable

    attr_reader value: Address
    def initialize: (Address value) -> void
    def <=>: (CidrRange other) -> Integer
    def succ: -> CidrRange
  end

  class Mask
    attr_reader bit: Integer
    attr_reader int: Integer
    def initialize: (Integer bit) -> void
    def to_address: -> Address
  end
end
